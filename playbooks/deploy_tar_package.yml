# deploy_tar_package.yml

- name: Set pkg_type and destination path
  set_fact:
    pkg_type: >-
      {% if 'OFAC' in pkgfile or 'ofac' in pkgfile %}
        OFAC
      {% elif 'FOF64' in pkgfile or 'fof64' in pkgfile %}
        FOF64
      {% elif 'filter_config' in pkgfile | lower %}
        FILTER_CONFIG
      {% elif 'filter_update' in pkgfile | lower %}
        FILTER_UPDATE
      {% else %}
        UNKNOWN
      {% endif %}
    dest_path: >-
      {% if 'OFAC' in pkgfile or 'ofac' in pkgfile %}
        /fskfilter/fsk/fffbin-{{ ofac_version | replace('.', '') }}
      {% elif 'FOF64' in pkgfile or 'fof64' in pkgfile %}
        /fskfilter/fsk/{{ fof64_version }}
      {% elif 'filter_config' in pkgfile | lower %}
        /fskfilter/fsk/conf
      {% elif 'filter_update' in pkgfile | lower %}
        /fskfilter/fsk/conf2
      {% else %}
        /tmp/unknown
      {% endif %}

- name: Fail if no matching pkg_type found for {{ pkgfile }}
  fail:
    msg: "Unknown package type for file {{ pkgfile }}. Check your filename and mapping!"
  when: pkg_type == "UNKNOWN" or dest_path == "/tmp/unknown"

- name: Print detected package type and destination
  debug:
    msg: "File '{{ pkgfile }}' detected as type '{{ pkg_type }}', will deploy to '{{ dest_path }}'"

########## FFFBIN DIRECTORY BACKUP (OFAC) ##########
- name: Backup existing fffbin-* directories except current
  shell: |
    for dir in {{ filter_dir }}/fffbin-*; do
      if [[ -d "$dir" && "$dir" != "{{ dest_path }}" ]]; then
        mv "$dir" "${dir}_backup"
      fi
    done
  args:
    executable: /bin/bash
  when: pkg_type == 'OFAC'

########## FOF64 DIRECTORIES BACKUP ##########
- name: Backup existing FOF-* directories except current version
  shell: |
    for suf in NTB SFX MCDD; do
      for dir in {{ filter_dir }}/FOF-${suf}-*; do
        if [[ -d "$dir" && "$dir" != "{{ filter_dir }}/FOF-${suf}-{{ fof64_version }}" ]]; then
          mv "$dir" "${dir}_backup"
        fi
      done
    done
  args:
    executable: /bin/bash
  when: pkg_type == 'FOF64'

########## Directory Creation ##########
- name: Clean destination directory
  file:
    path: "{{ dest_path }}"
    state: absent

- name: Create destination directory
  file:
    path: "{{ dest_path }}"
    state: directory
    mode: '0755'

- name: Ensure temp dir exists
  file:
    path: "{{ tmpdir }}"
    state: directory
    mode: '0755'

########## Download & Extract ##########
- name: Download package from Nexus
  get_url:
    url: "{{ package_type_nexus_paths[pkg_type | trim | upper] }}{{ pkgfile | trim }}"
    dest: "{{ tmpdir }}/{{ pkgfile | trim }}"
    mode: '0644'
    force: yes
    url_username: "{{ nexus_username }}"
    url_password: "{{ nexus_password }}"
    validate_certs: false

- name: Check file extension (.tar.gz or .zip)
  fail:
    msg: "Package file '{{ pkgfile }}' must have .tar.gz or .zip extension."
  when: pkgfile is not regex('.*\\.(tar\\.gz|zip)$')

- name: Extract the package (tar.gz or zip)
  unarchive:
    src: "{{ tmpdir }}/{{ pkgfile }}"
    dest: "{{ dest_path | trim }}"
    remote_src: yes

- name: Find inner tar files (if any)
  find:
    paths: "{{ dest_path }}"
    patterns: "*.tar"
    recurse: yes
  register: tar_file

- name: Extract inner tar file (if found)
  unarchive:
    src: "{{ item.path }}"
    dest: "{{ dest_path }}"
    remote_src: yes
  loop: "{{ tar_file.files }}"
  when: tar_file.matched > 0

- name: Print deployment info
  debug:
    msg: "Deployed {{ pkgfile }} to {{ dest_path }}"

########## OFAC BASH_PROFILE LOGIC ##########
- name: Comment out previous export FFFBIN lines (if any)
  replace:
    path: /home/tomss/.bash_profile
    regexp: '^export FFFBIN=.*'
    replace: '#\g<0>'
    backup: yes
    owner: tomss
    group: tomss
    mode: '0644'
  when: pkg_type == 'OFAC'

- name: Add FFFBIN export line with current version
  lineinfile:
    path: /home/tomss/.bash_profile
    line: "export FFFBIN=$GHK/FFFBIN-{{ ofac_version | replace('.', '') }}"
    insertafter: EOF
    state: present
    owner: tomss
    group: tomss
    mode: '0644'
  when: pkg_type == 'OFAC'

########## FOF64 BASH_PROFILE LOGIC ##########
- name: Remove old FOF entries from bash profile
  lineinfile:
    path: /home/tomss/.bash_profile
    regexp: '^export FOF_(NTB|SFX|MCDD|CTL_NTB|CTL_SFX|CTL_MCDD)='
    state: absent
    backup: yes
    owner: tomss
    group: tomss
    mode: '0644'
  when: pkg_type == 'FOF64'

- name: Update .bash_profile for new FOF variables
  lineinfile:
    path: /home/tomss/.bash_profile
    line: "{{ item }}"
    state: present
    insertafter: EOF
    owner: tomss
    group: tomss
    mode: '0644'
  loop:
    - "export FOF_NTB=$PSK/FOF-NTB-{{ fof64_version }}"
    - "export FOF_SFX=$PSK/FOF-SFX-{{ fof64_version }}"
    - "export FOF_MCDD=$PSK/FOF-MCDD-{{ fof64_version }}"
    - "export FOF_CTL_NTB=$PSK/FOF-NTB-{{ fof64_version }}"
    - "export FOF_CTL_SFX=$PSK/FOF-SFX-{{ fof64_version }}"
    - "export FOF_CTL_MCDD=$PSK/FOF-MCDD-{{ fof64_version }}"
  when: pkg_type == 'FOF64'

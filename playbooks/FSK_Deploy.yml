- name: Upload multiple files to Nexus
  hosts: "{{ COMP }}"
  gather_facts: false
  vars_files:
    - "../vars/common.var"

  tasks:

    - name: Check if filename extension is tar.gz
      fail:
        msg: "package file '{{ item }}' does not have .tar.gz extension. Failing the pipeline."
      when: item is not regex(".*\\.tar\\.gz$")
      loop: "{{ file_name.split(',') }}"


    - name: Check if file exists in Nexus
      shell: |
        curl -I -u {{ nexus_username }}:{{ nexus_password }} {{ nexus_path }}/{{ item }}
      register: artifact_status
      ignore_errors: true
      loop: "{{ file_name.split(',') }}"
      when: task == "upload"

    - name: Fail if file already exists
      fail:
        msg: "{{ item.item }} already uploaded to Nexus"
      loop: "{{ artifact_status.results }}"
      when:
        - task == "upload"
        - item.stdout is search("200 OK")

    - name: Upload file to Nexus
      shell: |
        curl -v -u {{ nexus_username }}:{{ nexus_password }} --upload-file {{ upload_source_path_lin }}/{{ item }} {{ nexus_path }}
      when: task == "upload"
      loop: "{{ file_name.split(',') }}"

    - name: Ensure version directory exists
      file:
        path: "/opt/myapp/versions/{{ version_id }}"
        state: directory
        mode: '0755'
      when: task == "deploy"

    - name: Download package from Nexus
      get_url:
        url: "{{ nexus_path }}/{{ file_name }}"
        dest: "/tmp/{{ file_name }}"
        mode: '0644'
        force: yes
        url_username: "{{ nexus_username }}"
        url_password: "{{ nexus_password }}"
        validate_certs: no
      when: task == "deploy"

    - name: Extract the tar.gz package
      unarchive:
        src: "/tmp/{{ file_name }}"
        dest: "/opt/myapp/versions/{{ version_id }}"
        remote_src: yes
      when: task == "deploy"

    - name: (Optional) List contents of the version directory
      shell: ls -l /opt/myapp/versions/{{ version_id }}
      register: lsout
      when: task == "deploy"

    - debug:
        var: lsout.stdout_lines
      when: task == "deploy"
